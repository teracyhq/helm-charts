## mysql image version
## ref: https://hub.docker.com/r/library/mysql/tags/
##
kubeMeta:
  appsApiVersion: apps/v1

mysqlImage: mysql:5.7.36
xtraBackupImage: teracy/xtrabackup:2.4
imagePullPolicy: IfNotPresent

mysqlha:
  replicaCount: 3

  ## Password for MySQL root user
  ##
  # mysqlRootPassword: ## Default: random 10 character string

  ## Username/password for MySQL replication user
  ##
  mysqlReplicationUser: repl
  # mysqlReplicationPassword:

  ## Create a database user
  ##
  # mysqlUser:
  # mysqlPassword: ## Default: random 10 character string

  ## Allow unauthenticated access, uncomment to enable
  ##
  # mysqlAllowEmptyPassword: true

  ## Create database with name and grant all permissions to user on startup, if needed
  # mysqlDatabase:

  ## Configuration files for the master and slaves
  ##
  configFiles:
    master.cnf: |
      # Apply this config only on the master.
      [mysqld]
      log-bin
      skip_name_resolve
    slave.cnf: |
      # Apply this config only on slaves.
      [mysqld]
      super-read-only # only available >= 5.7.8
      # read-only # uncomment this when mysql < 5.7.8
      skip_name_resolve

## Enable persistence using Persistent Volume Claims
## ref: http://kubernetes.io/docs/user-guide/persistent-volumes/
##
persistence:
  enabled: true
  ## If defined, storageClassName: <storageClass>
  ## If set to "-", storageClassName: "", which disables dynamic provisioning
  ## If undefined (the default) or set to null, no storageClassName spec is
  ##   set, choosing the default provisioner.  (gp2 on AWS, azure-disk on
  ##   Azure, standard on GKE, AWS & OpenStack)
  ##
  # storageClass: "-"
  accessModes:
  - ReadWriteOnce
  size: 4Gi
  annotations: {}

resources:
  requests:
    cpu: 100m
    memory: 128Mi

extraVolumes:

# restore data from a PV to /var/lib/mysql/
restore:
  enabled: false
  image: teracy/xtrabackup:2.4
  command: | # default command, should override this as you wish
    set -ex
    mkdir -p /xtrabackup_tmp/
    cp -r /xtrabackup_backupfiles/* /xtrabackup_tmp/
    xtrabackup --decompress --target-dir=/xtrabackup_tmp/
    xtrabackup --defaults-file=/xtrabackup_tmp/backup-my.cnf --prepare --target-dir=/xtrabackup_tmp/
    # make sure /var/lib/mysql is empty
    rm -rf /var/lib/mysql/* # dangerous here
    xtrabackup --copy-back --target-dir=/xtrabackup_tmp/
    rm -rf /xtrabackup_tmp/
  extraVolumeMounts:

backup:
  enabled: false
  image: teracy/xtrabackup:2.4
  command: |
    set -ex

    echo "Waiting for mysqld to be ready (accepting connections)"
    until mysql -h 127.0.0.1 -u ${MYSQL_REPLICATION_USER} -e "SELECT 1"; do sleep 5; done

    echo "Waiting for slave to sync";
    cd /var/lib/mysql
    if [[ -s xtrabackup_slave_info ]]; then
      [[ $(awk '{print $4}' xtrabackup_slave_info)  =~ ^MASTER_LOG_FILE=\'(.+)\',$ ]] || exit 1
      MASTER_LOG_FILE=${BASH_REMATCH[1]}

      [[ $(awk '{print $5}' xtrabackup_slave_info) =~ ^MASTER_LOG_POS=([[:digit:]]+)\;$ ]] || exit 1
      MASTER_LOG_POS=${BASH_REMATCH[1]}

    elif [[ -s xtrabackup_binlog_info ]]; then
      [[ $(cat xtrabackup_binlog_info) =~ ^(.*?)[[:space:]]+(.*?)$ ]] || exit 1
      MASTER_LOG_FILE=${BASH_REMATCH[1]}
      MASTER_LOG_POS=${BASH_REMATCH[2]}
    fi
    # back to the root directory for xtrabackup to store files within the defaut path
    cd /
    mysql -h 127.0.0.1 -u ${MYSQL_REPLICATION_USER} -e "SELECT MASTER_POS_WAIT('${MASTER_LOG_FILE}', ${MASTER_LOG_POS})";
    echo "slave sync done"
    rm -rf /xtrabackup_backupfiles/*
    xtrabackup --backup --compress --host=127.0.0.1 --user=$MYSQL_REPLICATION_USER --password=$MYSQL_REPLICATION_PASSWORD
    echo "backup done"
    touch /var/lib/mysql/.mysqlha.backup.done
    tail -f /dev/null # keep running
  extraVolumeMounts:
